# -*- coding: utf-8 -*-
"""lineardata_hospital

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NLTNGkS6HvnjaVl_1e_Fw2kYGmgc-zGU
"""

from collections import defaultdict, deque
class PatientRecord:
    def __init__(self, first_name, last_name, age, gender, height, weight, phonenumber, email, identifier, admission_date):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.gender = gender
        self.height = height
        self.weight = weight
        self.phonenumber = phonenumber
        self.email = email
        self.identifier = identifier
        self.admission_date = admission_date
        self.appointments = []
        self.medications = []

    def add_appointment(self, doctor_name, date, time):
        self.appointments.append((doctor_name, date, time))

    def add_medication(self, medication_name):
        self.medications.append(medication_name)

    def display_summary(self):
        print("Patient Summary:")
        print(f"Name: {self.first_name} {self.last_name}")
        print(f"Age: {self.age}")
        print(f"Gender: {self.gender}")
        print(f"Height: {self.height}")
        print(f"Weight: {self.weight}")
        print(f"Phone Number: {self.phonenumber}")
        print(f"Email: {self.email}")
        print(f"Admission Date: {self.admission_date}")

        if self.appointments:
            print("\nAppointments:")
            for doctor_name, date, time in self.appointments:
                print(f"- Doctor: {doctor_name}, Date: {date}, Time: {time}")

        if self.medications:
            print("\nMedications:")
            for medication in self.medications:
                print(f"- {medication}")

        print("\n")

class DoctorSchedule:
    def __init__(self, doctor_name):
        self.doctor_name = doctor_name
        self.schedule = defaultdict(list)  # Initialize schedule as a defaultdict

    def add_slot(self, date, time):
        self.schedule[date].append(time)

    def remove_slot(self, date, time):
        if time in self.schedule[date]:
            self.schedule[date].remove(time)
            return True
        else:
            return False

    def display_schedule(self):
        for date, times in self.schedule.items():
            print(f"Date: {date}")
            print("Available Slots:")
            for time in times:
                print(time)


class Doctor:
    def __init__(self, doctor_name, doctor_schedule):
        self.doctor_name = doctor_name
        self.schedule = doctor_schedule

    def book_slot(self, date, time, patient_name, patient_id):
        if (date, time) in self.schedule.schedule[date]:
            self.schedule.remove_slot(date, time)  # Remove the slot from the doctor's schedule
            self.schedule.booked_slots[(date, time)] = (self.doctor_name, patient_name, patient_id)  # Record the booked slot
            print(f"Slot booked successfully for {date} at {time} with doctor {self.doctor_name} for patient {patient_name} (ID: {patient_id}).")
        else:
            print("Sorry, that slot is not available.")



    def cancel_slot(self, date, time):
        if self.schedule.add_slot(date, time):
            print(f"Slot cancelled successfully for {date} at {time} with doctor {self.doctor_name}.")
        else:
            print("Slot not found for cancellation.")

    def display_schedule(self):
        self.schedule.display_schedule()


class PatientBookingSystem:
    def __init__(self, doctor_schedule):
        if isinstance(doctor_schedule, DoctorSchedule):
            self.schedule = doctor_schedule
            self.booked_slots = {}  # Dictionary to keep track of booked slots

        else:
            raise ValueError("doctor_schedule must be an instance of DoctorSchedule")

    def book_slot(self, date, time, doctor_name, patient_name, patient_id):
        if date in self.schedule.schedule and time in self.schedule.schedule[date]:
            if (date, time) not in self.booked_slots:
                self.schedule.remove_slot(date, time)  # Remove the slot from the doctor's schedule
                self.booked_slots[(date, time)] = (doctor_name, patient_name, patient_id)  # Record the booked slot
                print(f"Slot booked successfully for {date} at {time} with doctor {doctor_name} for patient {patient_name} (ID: {patient_id}).")
            else:
                print("Slot already booked for this date and time.")
        else:
            print("Sorry, that slot is not available.")
    def cancel_slot(self, doctor_name, patient_name, patient_id,date, time):
        if (date, time) in self.booked_slots:
            doctor_name, patient_name, patient_id = self.booked_slots[(date, time)]
            self.schedule.add_slot(date, time)  # Add the slot back to the doctor's schedule
            del self.booked_slots[(date, time)]  # Remove the slot from booked slots
            print(f"Slot canceled successfully, patient_id:{patient_Id} for patient {patient_name} with {doctor_name} for {date} at {time}.")
        else:
            print("Slot not found for cancellation.")


class Hospital:
    def __init__(self):
        self.doctors = {}

    def add_doctor(self, doctor):
        self.doctors[doctor.doctor_name] = doctor
    def get_doctor_schedule(self, doctor_name):
        doctor = self.doctors.get(doctor_name)
        if doctor:
            return doctor.schedule
        return None

# Create registration system instance
hospital = Hospital()

class ListNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class RegistrationSystem:
    def __init__(self):
        self.patient_records = {}
        self.admission_dates = []
        self.undo_stack = []
        self.print_job_queue = deque()
        self.consultation_queue_head = None  # Head of the linked list
        self.prescription_stack = {}

    def register_patient(self, first_name, last_name, age, gender, height, weight, phonenumber, email, admission_date=None, identifier=None):
        if identifier is None:
            identifier = len(self.patient_records) + 1
        else:
            identifier = int(identifier)

        patient_record = PatientRecord(first_name, last_name, age, gender, height, weight, phonenumber, email, identifier, admission_date)
        self.patient_records[identifier] = patient_record
        self.undo_stack.append(('register', identifier))
        self.print_job_queue.append(identifier)

        # Add the new patient to the consultation queue as a new node in the linked list
        new_node = ListNode(identifier)
        if self.consultation_queue_head is None:
            self.consultation_queue_head = new_node
        else:
            current = self.consultation_queue_head
            while current.next:
                current = current.next
            current.next = new_node

        print(f"Patient {first_name} {last_name} registered with ID {identifier} on {admission_date}")
        self.display_consultation_queue()


    def sort_patients_by_admission_date(self):
        sorted_records = sorted(self.patient_records.values(), key=lambda x: x.admission_date)
        return sorted_records

    def discharge_patient(self, identifier):
        if identifier in self.patient_records:
            del self.patient_records[identifier]
            print(f"Patient with ID {identifier} discharged successfully.")
            if identifier in self.print_job_queue:
                self.print_job_queue.remove(identifier)
            if identifier in self.consultation_queue:
                self.consultation_queue.remove(identifier)
        else:
            print("Patient not found")

    def undo_registration(self):
        if self.undo_stack:
            action, identifier = self.undo_stack.pop()
            if action == 'register':
                del self.patient_records[identifier]
                print(f"Undo registration for patient with ID {identifier}")
                if identifier in self.print_job_queue:
                    self.print_job_queue.remove(identifier)
                if identifier in self.consultation_queue:
                    self.consultation_queue.remove(identifier)
            else:
                print("Invalid action on undo stack")
        else:
            print("Nothing to undo")

    def update_patient_info(self, first_name, last_name, age, gender, height, weight, phonenumber, email, identifier):
        patient_record = self.patient_records.get(identifier)
        if patient_record:
            # Update patient information
            patient_record.first_name = first_name
            patient_record.last_name = last_name
            patient_record.age = age
            patient_record.gender = gender
            patient_record.height = height
            patient_record.weight = weight
            patient_record.phonenumber = phonenumber
            patient_record.email = email
            self.patient_records[identifier] = patient_record
            print("Patient information updated successfully")
        else:
            print("Patient not found")

    def process_print_jobs(self):
        while self.print_job_queue:
            identifier = self.print_job_queue.popleft()
            patient_record = self.patient_records.get(identifier)
            if patient_record:
                # Update patient information before processing print job
                self.update_patient_info(patient_record.first_name, patient_record.last_name, patient_record.age,
                                         patient_record.gender, patient_record.height, patient_record.weight,
                                         patient_record.phonenumber, patient_record.email, identifier)
                print(f"Printing patient record for {patient_record.first_name} {patient_record.last_name}")
                patient_record.display_summary()  # Display patient summary
            else:
                print(f"Patient with ID {identifier} not found")

    def retrieve_patient_info(self, identifier):
        identifier = int(identifier)  # Convert identifier to integer
        patient_record = self.patient_records.get(identifier)
        if patient_record:
            # Update patient information before retrieving
            self.update_patient_info(patient_record.first_name, patient_record.last_name, patient_record.age,
                                     patient_record.gender, patient_record.height, patient_record.weight,
                                     patient_record.phonenumber, patient_record.email, identifier)
            print("Patient found!")
            print("Patient Information:")
            patient_record.display_summary()  # Display patient summary
        else:
            print("Patient not found")
    def display_consultation_queue(self):
        print("Consultation Queue:")
        current = self.consultation_queue_head
        while current:
            patient_id = current.data
            patient_record = self.patient_records.get(patient_id)
            if patient_record:
                print(f"Patient ID: {patient_id}, Name: {patient_record.first_name} {patient_record.last_name}")
            else:
                print(f"Patient with ID {patient_id} not found")
            current = current.next

    def cancel_registration(self, identifier):  # Update method signature
        patient_record = self.patient_records.get(identifier)  # Change patient_id to identifier
        if patient_record:
            del self.patient_records[identifier]  # Change patient_id to identifier
            print("Patient registration canceled successfully")
            if identifier in self.print_job_queue:  # Change patient_id to identifier
                self.print_job_queue.remove(identifier)  # Change patient_id to identifier
            if identifier in self.consultation_queue:  # Change patient_id to identifier
                self.consultation_queue.remove(identifier)  # Change patient_id to identifier
        else:
            print("Patient not found")

    def schedule_appointment(self, identifier, doctor_name, date, time):  # Update method signature and parameters
        if identifier in self.patient_records:  # Change patient_id to identifier
            self.consultation_queue[identifier] = (date, time)  # Change patient_id to identifier
            print(f"Scheduled appointment for patient ID {identifier} with Dr. {doctor_name} on {date} at {time}")
        else:
            print("Patient not found")
    def issue_prescription(self, identifier, medication_name):
        identifier = int(identifier)
        patient_record = self.patient_records.get(identifier)
        if patient_record:
            if identifier not in self.prescription_stack:
                self.prescription_stack[identifier] = []
            self.prescription_stack[identifier].append(medication_name)
            print(f"Prescription issued for {medication_name} to patient ID {identifier}")
        else:
            print("Patient not found")

    def display_prescriptions(self, identifier):
        identifier = int(identifier)
        if identifier in self.prescription_stack:
            print(f"Prescriptions for patient ID {identifier}:")
            for prescription in self.prescription_stack[identifier]:
                print("- ", prescription)
        else:
            print("No prescriptions found for the patient")

    def process_prescriptions(self):
        for identifier, prescriptions in self.prescription_stack.items():
            patient_record = self.patient_records.get(identifier)
            if patient_record:
                print(f"Issuing prescriptions for {patient_record.first_name} {patient_record.last_name}:")
                for prescription in prescriptions:
                    print("- ", prescription)
                print("\n")
            else:
                print(f"Patient with ID {identifier} not found")
    def display_prescriptions_option(self):
        identifier = input("Enter patient's identifier: ")
        self.display_prescriptions(identifier)


def main():
    # Create a doctor's schedule
    doctor_name = "Dr. Smith"
    doctor_schedule = DoctorSchedule(doctor_name)
    hospital.add_doctor(Doctor(doctor_name, doctor_schedule))
    doctor_schedule.add_slot("2024-03-27", "09:00")
    doctor_schedule.add_slot("2024-03-27", "10:00")
    doctor_schedule.add_slot("2024-03-27", "11:00")
    doctor_schedule.add_slot("2024-03-28", "09:00")
    doctor_schedule.add_slot("2024-03-28", "10:00")

    # Initialize the registration system
    registration_system = RegistrationSystem()

    # Initialize the patient booking system
    booking_system = PatientBookingSystem(doctor_schedule)
    identifier = len(registration_system.patient_records) + 1

    registration_system = RegistrationSystem()

    while True:
        print("\nPatient Registration System Menu:")
        print("1. Register Patient")
        print("2. Sort Patients by Admission Date")
        print("3. Undo Last Registration")
        print("4. Process Print Jobs")
        print("5. Retrieve Patient Information")
        print("6. Update Patient Information")
        print("7. Cancel Patient Registration")
        print("8. Display Doctor's Schedule")
        print("9. Book a Slot")
        print("10. Cancel a Slot")
        print("11. Display Consultation Queue")
        print("12. Issue Prescription")
        print("13. Display Prescriptions")
        print("14. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            first_name = input("Enter patient's first name: ")
            last_name = input("Enter patient's last name: ")
            age = input("Enter patient's age: ")
            gender = input("Enter patient's gender: ")
            height = input("Enter patient's height: ")
            weight = input("Enter patient's weight: ")
            phonenumber = input("Enter patient's Phone number: ")
            email = input("Enter patient's email: ")
            admission_date = input("Enter admission date (YYYY-MM-DD): ")
            registration_system.register_patient(first_name, last_name, age, gender, height, weight, phonenumber, email, admission_date)

        elif choice == "2":
            sorted_patients = registration_system.sort_patients_by_admission_date()
            print("\nPatients sorted by admission date:")
            for patient in sorted_patients:
                print(f"{patient.first_name} {patient.last_name} (Admission Date: {patient.admission_date})")

        elif choice == "3":
            registration_system.undo_registration()

        elif choice == "4":
            registration_system.process_print_jobs()

        elif choice == "5":
            identifier = input("Enter patient's identifier: ")
            registration_system.retrieve_patient_info(identifier)

        elif choice == "6":
            identifier = input("Enter patient's identifier: ")
            first_name = input("Enter updated first name: ")
            last_name = input("Enter updated last name: ")
            age = input("Enter updated patient's age: ")
            gender=input("Enter updated patient's gender: ")
            height = input("Enter updated patient's height: ")
            weight = input("Enter updated patient's weight: ")
            phonenumber = input("Enter updated patient's Phone number: ")
            email = input("Enter updated patient's email: ")
            registration_system.update_patient_info(first_name, last_name, age, gender, height, weight, phonenumber, email, identifier)

        elif choice == "7":
            identifier = input("Enter patient's identifier: ")
            registration_system.cancel_registration(identifier)

        elif choice == "8":
           doctor_schedule.display_schedule()
        elif choice == "9":
            doctor_name = input("Enter doctor's name: ")
            if doctor_name in hospital.doctors:
                date = input("Enter the date (YYYY-MM-DD): ")
                time = input("Enter the time (HH:MM): ")
                patient_name = input("Enter patient's name: ")
                patient_id = input("Enter patient's ID: ")
                booking_system.book_slot(date, time, doctor_name, patient_name, patient_id)
            else:
                print("Doctor not found.")
        elif choice == "10":
            doctor_name = input("Enter doctor's name: ")
            if doctor_name in hospital.doctors:
               date = input("Enter the date (YYYY-MM-DD): ")
               time = input("Enter the time (HH:MM): ")
               if hospital.doctors[doctor_name].schedule.remove_slot(date, time):
                  print(f"Slot canceled successfully for {date} at {time}.")
               else:
                  print("Slot not found for cancellation.")
            else:
                print("Doctor not found.")

        elif choice == "11":
            registration_system.display_consultation_queue()

        elif choice == "12":
                identifier = input("Enter patient's identifier: ")
                medication_name = input("Enter medication name: ")
                registration_system.issue_prescription(identifier, medication_name)
        elif choice == "13":
            registration_system.display_prescriptions_option()
        elif choice == "14":
            print("Exiting program. Goodbye!")
            break

        else:
            print("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    main()